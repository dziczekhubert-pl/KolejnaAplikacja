"""
Django settings for kolejna_aplikacja project.

Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os

# --------------------------------------------------------------------------------------
# ŚCIEŻKI
# --------------------------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# --------------------------------------------------------------------------------------
# KLUCZE / DEBUG / HOSTY
# --------------------------------------------------------------------------------------
# Ustaw przez zmienne środowiskowe w prod:
#   export DJANGO_SECRET_KEY="super-tajny"
#   export DJANGO_DEBUG="0"
#   export DJANGO_ALLOWED_HOSTS="example.com,www.example.com"
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    # dev only
    "django-insecure-evt(poz%^0@3!hgkq(qxc3+vbjti+zo3$c@b(p$yb!l=zekzej",
)

DEBUG = os.getenv("DJANGO_DEBUG", "1") == "1"

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(
    ",") if not DEBUG else ["*"]
CSRF_TRUSTED_ORIGINS = [
    origin for origin in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if origin
]

# --------------------------------------------------------------------------------------
# APLIKACJE
# --------------------------------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Twoja aplikacja
    "core.apps.CoreConfig",  # zapewnia import sygnałów w AppConfig.ready()
]

# --------------------------------------------------------------------------------------
# MIDDLEWARE
# --------------------------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# --------------------------------------------------------------------------------------
# URL / WSGI
# --------------------------------------------------------------------------------------
ROOT_URLCONF = "kolejna_aplikacja.urls"
WSGI_APPLICATION = "kolejna_aplikacja.wsgi.application"

# --------------------------------------------------------------------------------------
# TEMPLATES
# --------------------------------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # opcjonalny katalog na Twoje szablony
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# --------------------------------------------------------------------------------------
# BAZA DANYCH
# --------------------------------------------------------------------------------------
# Produkcyjnie użyj PostgreSQL (mocna równoległość i blokady).
# Zmienne środowiskowe (przykład):
#   export POSTGRES_DB="moja_baza"
#   export POSTGRES_USER="uzytkownik"
#   export POSTGRES_PASSWORD="haslo"
#   export POSTGRES_HOST="127.0.0.1"
#   export POSTGRES_PORT="5432"
USE_POSTGRES = os.getenv("USE_POSTGRES", "0") == "1"  # domyślnie True

if USE_POSTGRES:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB", "moja_baza"),
            "USER": os.getenv("POSTGRES_USER", "postgres"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD", "postgres"),
            "HOST": os.getenv("POSTGRES_HOST", "127.0.0.1"),
            "PORT": os.getenv("POSTGRES_PORT", "5432"),
            # pooling
            "CONN_MAX_AGE": int(os.getenv("POSTGRES_CONN_MAX_AGE", "60")),
            "OPTIONS": {
                # Lepiej wykrywać stracone połączenia przy długim bezruchu:
                "connect_timeout": int(os.getenv("POSTGRES_CONNECT_TIMEOUT", "5")),
            },
        }
    }
else:
    # Tryb DEV fallback (pojedynczy plik) – NIE do dużej równoległości
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# --------------------------------------------------------------------------------------
# MIĘDZYNARODOWOŚĆ / CZAS
# --------------------------------------------------------------------------------------
LANGUAGE_CODE = "pl"
TIME_ZONE = "Europe/Warsaw"
USE_I18N = True
USE_TZ = True

# --------------------------------------------------------------------------------------
# STATIC / MEDIA
# --------------------------------------------------------------------------------------
STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR /
                    "static"] if (BASE_DIR / "static").exists() else []
STATIC_ROOT = BASE_DIR / "staticfiles"  # do collectstatic w produkcji

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# --------------------------------------------------------------------------------------
# DOMYŚLNY TYP PK
# --------------------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --------------------------------------------------------------------------------------
# LOGOWANIE
# --------------------------------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {name} | {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "verbose"},
    },
    "loggers": {
        "django.db.backends": {
            "handlers": ["console"],
            "level": "INFO" if DEBUG else "WARNING",
        },
        "core": {  # Twój pakiet aplikacji
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# --------------------------------------------------------------------------------------
# BEZPIECZEŃSTWO (tylko gdy DEBUG = False)
# --------------------------------------------------------------------------------------
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_SSL_REDIRECT = os.getenv("DJANGO_SECURE_SSL_REDIRECT", "1") == "1"
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # Zapobiegaj MIME sniffing:
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = int(
        os.getenv("DJANGO_SECURE_HSTS_SECONDS", "31536000"))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv(
        "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", "1") == "1"
    SECURE_HSTS_PRELOAD = os.getenv("DJANGO_SECURE_HSTS_PRELOAD", "1") == "1"
    X_FRAME_OPTIONS = "DENY"
    # CSRF trusted origins powinny być ustawione przez env (patrz wyżej)

# --------------------------------------------------------------------------------------
# ŚCIEŻKI NA SNAPSHOTY JSON (jeśli korzystasz z eksportu do JSON)
# --------------------------------------------------------------------------------------
JSON_DATA_DIR = BASE_DIR / "data_json"
JSON_DATA_DIR.mkdir(parents=True, exist_ok=True)

JSON_FILES = {
    "carts": JSON_DATA_DIR / "carts.json",
    "loads": JSON_DATA_DIR / "loads.json",
    "history": JSON_DATA_DIR / "history.jsonl",
}

# --------------------------------------------------------------------------------------
# (Opcjonalnie) CELERY – jeśli planujesz eksport snapshotów w tle
# --------------------------------------------------------------------------------------
# Przykładowe wartości (odkomentuj, jeśli używasz Celery):
# CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://127.0.0.1:6379/0")
# CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://127.0.0.1:6379/0")
# CELERY_TIMEZONE = TIME_ZONE
# CELERY_TASK_ALWAYS_EAGER = False
