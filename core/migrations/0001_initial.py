# Generated by Django 5.2.6 on 2025-10-05 19:47

import core.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=20, unique=True, verbose_name='Numer wózka')),
                ('tare_kg', models.DecimalField(blank=True, decimal_places=1, help_text='Wpisz tarę wózka w kg, np. 100.0 lub 100.5.', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0')), django.core.validators.MaxValueValidator(Decimal('800.0')), core.models.validate_half_kg], verbose_name='Tara wózka [kg]')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='ProductionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default='default', max_length=32, unique=True)),
                ('days_count', models.PositiveSmallIntegerField(default=1)),
                ('dates', models.JSONField(default=dict)),
                ('pcs', models.JSONField(default=dict)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.CharField(blank=True, max_length=64)),
            ],
            options={
                'db_table': 'production_plan',
            },
        ),
        migrations.CreateModel(
            name='TunnelDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('model', models.CharField(max_length=32)),
                ('action', models.CharField(max_length=16)),
                ('ref_id', models.IntegerField(db_index=True)),
                ('payload', models.JSONField()),
            ],
            options={
                'ordering': ['id'],
                'indexes': [models.Index(fields=['model', 'action'], name='core_eventl_model_f667c9_idx'), models.Index(fields=['ts'], name='core_eventl_ts_bab795_idx'), models.Index(fields=['ref_id'], name='core_eventl_ref_id_871f2c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Load',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('packing_date', models.DateField(default=django.utils.timezone.localdate, verbose_name='Data pakowania')),
                ('production_shift', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], default='I', max_length=4, verbose_name='Zmiana')),
                ('product_kind', models.CharField(choices=[('Naturalny', 'Naturalny'), ('Ziołowy', 'Ziołowy'), ('Pomidorowy', 'Pomidorowy')], default='Naturalny', max_length=20, verbose_name='Rodzaj batona')),
                ('product_code', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)], verbose_name='Kod')),
                ('handled_by', models.CharField(blank=True, max_length=100, verbose_name='Wprowadził')),
                ('flavor', models.CharField(blank=True, max_length=50, verbose_name='Smak')),
                ('tank', models.CharField(blank=True, max_length=50, verbose_name='Tank')),
                ('pieces', models.PositiveIntegerField(default=66, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(66)], verbose_name='Sztuk na wózku')),
                ('total_weight_kg', models.DecimalField(decimal_places=1, help_text='Pole przechowuje masę NETTO w kg (skoki co 0,5).', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.0'), message='Masa nie może być ujemna.'), django.core.validators.MaxValueValidator(Decimal('800.0'), message='Masa wózka nie może przekraczać 800 kg.'), core.models.validate_half_kg], verbose_name='Masa [kg]')),
                ('initial_weight_kg', models.DecimalField(blank=True, decimal_places=1, editable=False, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0')), django.core.validators.MaxValueValidator(Decimal('800.0')), core.models.validate_half_kg], verbose_name='Masa początkowa [kg]')),
                ('cart_weight_snapshot', models.DecimalField(blank=True, decimal_places=1, editable=False, help_text='Wartość ustawiana automatycznie przy zdejmowaniu do produkcji.', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0')), django.core.validators.MaxValueValidator(Decimal('800.0')), core.models.validate_half_kg], verbose_name='Masa w momencie zdjęcia [kg]')),
                ('produced_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Czas wyprodukowania')),
                ('status', models.CharField(choices=[('IN_COLD_ROOM', 'W magazynku'), ('TAKEN_TO_PRODUCTION', 'Zdjęty do produkcji')], default='IN_COLD_ROOM', max_length=32)),
                ('taken_at', models.DateTimeField(blank=True, null=True, verbose_name='Czas zdjęcia')),
                ('edited_by', models.CharField(blank=True, max_length=100, verbose_name='Edytował')),
                ('edited_at', models.DateTimeField(blank=True, null=True, verbose_name='Czas edycji')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('version', models.PositiveIntegerField(default=0, help_text='Wewnętrzna wersja rekordu do CAS.')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='loads', to='core.cart')),
            ],
            options={
                'ordering': ['-produced_at'],
                'indexes': [models.Index(fields=['status'], name='core_load_status_6b6eb1_idx'), models.Index(fields=['produced_at'], name='core_load_produce_764fdd_idx'), models.Index(fields=['cart', 'status'], name='core_load_cart_id_b97428_idx'), models.Index(fields=['status', 'produced_at'], name='core_load_status_b0c389_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('status', 'IN_COLD_ROOM')), fields=('cart',), name='unique_active_load_per_cart'), models.CheckConstraint(condition=models.Q(('pieces__gte', 1), ('pieces__lte', 66)), name='pieces_in_1_66'), models.CheckConstraint(condition=models.Q(('product_code__gte', 1), ('product_code__lte', 365)), name='product_code_1_365')],
            },
        ),
        migrations.CreateModel(
            name='TunnelRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_kind', models.CharField(choices=[('Naturalny', 'Naturalny'), ('Ziołowy', 'Ziołowy'), ('Pomidorowy', 'Pomidorowy')], max_length=20)),
                ('product_code', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('bar_production_date', models.DateField(blank=True, null=True)),
                ('cooling_time_min', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(600)])),
                ('temp_tunnel', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('temp_inlet', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('temp_shell_out', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('temp_core_out', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('taken_carts_csv', models.CharField(blank=True, default='', max_length=512)),
                ('sum_taken_kg', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=8)),
                ('order_no', models.PositiveIntegerField(db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='core.tunnelday')),
            ],
            options={
                'ordering': ['order_no', 'id'],
                'indexes': [models.Index(fields=['day', 'order_no'], name='core_tunnel_day_id_07b7d8_idx'), models.Index(fields=['product_kind'], name='core_tunnel_product_608a58_idx'), models.Index(fields=['product_code'], name='core_tunnel_product_c03c4c_idx')],
            },
        ),
    ]
